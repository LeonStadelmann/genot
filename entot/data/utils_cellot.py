#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Feb  8 18:47:21 2022
  
@author: theouscidda
"""

from contextlib import contextmanager
from pathlib import Path
from sqlite3 import NotSupportedError
from typing import Any, Callable, Dict, Iterator, Sequence
from typing_extensions import Literal
import numpy as np
import torch
import os

AnnDataDataset = Any

@contextmanager
def set_directory(path: Path):
    """Sets the cwd within a given directory.
    
    Args:
        path: the (Pathlib) directory.
    """

    origin = Path().absolute()
    try:
        os.chdir(path)
        yield
    finally:
        os.chdir(origin)
        
def get_argv(
    drug_name: str,
    drug_setting: Literal["4i", "scRNAseq"],
    where: Literal["data_space", "latent_space"],
) -> Sequence[str]:
    """Get the argv str associated to the bash command provided 
    in the scripts/submit file, to load dataset associated to drug: 
    ``drug_name``.
    Loaded data can lie in the data space or in the latent space 
    learned by scgen model. This is only for the scRNAseq data, 
    which is high dimensional (dim = 1000).
    
    Args:
        drug_name: name of the drug associated to dataset.
        drug_setting: type of genomic data, should be in {4i, scRNAseq}.
        where: where the loaded data should lie, should be in {data_space, 
          latent_space}; latent_space only available for scRNAseq data.

    Returns:
        argv: the argv str.
    """
    assert drug_setting in ["4i", "scRNAseq"], (
        f"drug_setting: {drug_setting} not supported, it should be in " 
        "{4i, scRNAseq}."
    )
    if drug_setting == "4i":
        assert where == 'data_space',(
            "No latent space for 4i data."
        )
        argv = [
            './scripts/train.py',
            '--outdir', f'./results/4i/drug-{drug_name}/model-cellot',
            '--config', './configs/tasks/4i.yaml',
            '--config', './configs/models/cellot.yaml',
            '--config.data.target', drug_name
        ]
    elif drug_setting == "scRNAseq":
        argv = [
            './scripts/train.py',
            '--outdir', f'./results/scrna-sciplex3/drug-{drug_name}/model-cellot',
            '--config', './configs/tasks/sciplex3.yaml',
            '--config', './configs/models/cellot.yaml',
            '--config.data.target', f'{drug_name}',
        ]
        if where == 'data_space':
            pass
        elif where == 'latent_space':
            argv += [
                '--config.data.ae_emb.path', 
                f'./results/scrna-sciplex3/drug-{drug_name}/model-scgen'
            ]
        else:
            raise NotSupportedError(
                f"where: {where} not supported, it should be in " +
                "{data_space, latent_space}."
            )
    return argv
        

def get_config(
    drug_name: str,
    drug_setting: Literal["4i", "scRNAseq"],
    where: Literal["data_space", "latent_space"],
    cellot_path: Path = Path("cellot"),
) -> Any:
    """Load the config associated to the dataset corresponding to drug: 
    ``drug_name`.
    - ``drug_setting`` defines the type of data to load, i.e. 4i or scRNAseq
    - ``where``` defines the where the loaded data lies,
        i.e. data_space or latent_space
    
    Args:
        drug_name: name of the drug associated to dataset.
        drug_setting: type of genomic data, should be in {4i, scRNAseq}.
        where: where the loaded data should lie, should be in {data_space, 
          latent_space}; latent_space only available for scRNAseq data.

    Returns:
        config: config assocaiated to the dataset.
    """
    argv = get_argv(
        drug_name=drug_name,
        drug_setting=drug_setting,
        where=where
    )

    # go in the cellot directory via context manager
    with set_directory(cellot_path):

        # cellot files to load and prepare data
        from cellot.train.experiment import prepare

        # flags
        from absl import flags
        try:
            flags.DEFINE_multi_string("config", "", "Path to config")
        except:
            pass  # if flags alreasy defined

        config, _ = prepare(argv)
    
    return config
        
        

def load_iterator(
    drug_name: str,
    drug_setting: Literal["4i", "scRNAseq"],
    where: Literal["data_space", "latent_space"],
    cellot_path: Path = Path("cellot"),
) -> Dict[str, Iterator]:
    """
    Load dict of the 4 iterators asociated to drug: ``drug_name``;
    - 2 training iterators: iterator.train.source, iterator.train.target,
    - 2 testing iterators: iterator.test.source, iterator.test.target.
    Loaded data generated by iterators can lie in the data space or 
    in the latent space learned by scgen model. This is only for the 
    scRNAseq data, which is high dimensional (dim = 1000).
    
    Args:
        drug_name: name of the drug associated to dataset.
        drug_setting: type of genomic data, should be in {4i, scRNAseq}.
        where: where the loaded data should lie, should be in {data_space, 
          latent_space}; latent_space only available for scRNAseq data.

    Returns:
        iterators: the trainin and testing, source and target iterators.
    """

    argv = get_argv(
        drug_name=drug_name,
        drug_setting=drug_setting,
        where=where
    )

    # go in the cellot directory via context manager
    with set_directory(cellot_path):

        # cellot files to load and prepare data
        from cellot.utils.loaders import load
        from cellot.data.utils import cast_loader_to_iterator
        from cellot.train.experiment import prepare

        # flags
        from absl import flags
        try:
            flags.DEFINE_multi_string("config", "", "Path to config")
        except:
            pass  # if flags alreasy defined

        config, outdir = prepare(argv)
        cachedir = outdir / "cache"
        _, _, loader = load(config, restore=cachedir / "last.pt")
        iterators = cast_loader_to_iterator(loader, cycle_all=True)

    return iterators


def load_encode_decode(
    drug_name: str,
    cellot_path: Path = Path("cellot"),
) -> Sequence[Callable]:
    """Load encoder and decoder functions of the autoencoder model 
    trained for drug `drug_name`, in scRNAseq setting.
    
    Args:
        drug_name: name of the drug associated to dataset.

    Returns:
        encode: encoder function of the autoencoder model.
        decode: decoder function of the autoencoder model.
    """
    
    argv = get_argv(
        drug_name=drug_name,
        drug_setting="scRNAseq",
        where="latent_space"
    )
    # go in the cellot directory via context manager
    with set_directory(cellot_path):

        # cellot files to load and prepare data
        from cellot.utils.loaders import load
        from cellot.train.experiment import prepare
        from cellot.models import load_autoencoder_model
        from cellot.utils import load_config

        # flags
        from absl import flags
        try:
            flags.DEFINE_multi_string("config", "", "Path to config")
        except:
            pass  # if flags alreasy defined

        config, _ = prepare(argv)
        dim_scRNAseq = 1_000

        # load encoder
        assert config.get('model.name', 'cellot') == 'cellot'
        path_ae = Path(config.data.ae_emb.path)
        model_kwargs = {'input_dim': dim_scRNAseq}
        config_ae = load_config(path_ae/'config.yaml')
        ae_model, _ = load_autoencoder_model(
            config_ae, restore=path_ae/'cache/model.pt',
            **model_kwargs
        )
        ae_model.eval()

    def encode(x): return ae_model.encode(
        torch.tensor(np.array(x))  # enforce tensor conversion
    ).detach().numpy()

    def decode(x): return ae_model.decode(
        torch.tensor(np.array(x))  # enforce tensor conversion
    ).detach().numpy()

    return encode, decode


def load_dataset(
    drug_name: str,
    drug_setting: Literal["4i", "scRNAseq"],
    where: Literal["data_space", "latent_space"],
    cellot_path: Path = Path("cellot"),
) -> AnnDataDataset:
    """
    Load andata dataset associated to drug: ``drug_name``.
    Loaded data can lie in the data space or in the latent 
    space learned by scgen model. This is only for the scRNAseq data, 
    which is high dimensional (dim = 1000).

    Args:
        drug_name: name of the drug associated to dataset.
        drug_setting: type of genomic data, should be in {4i, scRNAseq}.
        where: where the loaded data should lie, should be in {data_space, 
          latent_space}; latent_space only available for scRNAseq data.

    Returns:
        dataset: corresponding andata dataset.
    """

    argv = get_argv(
        drug_name=drug_name,
        drug_setting=drug_setting,
        where=where
    )

    with set_directory(cellot_path):

        from cellot.utils.evaluate import load_data
        from cellot.train.experiment import prepare

        # flags
        from absl import flags
        try:
            flags.DEFINE_multi_string("config", "", "Path to config")
        except:
            pass  # if flags alreasy defined

        config, _ = prepare(argv)
        dataset, _ = load_data(
            config,
            split_on=["split", "transport"],
            return_as="dataset",
            include_model_kwargs=True
        )

    return dataset
